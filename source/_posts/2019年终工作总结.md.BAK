---
title: 2019年终工作总结
date: 2019-12-27 14:03:45
tags: 工作
---
	
由于车载网联功能的普及，车机的功能模块将越来越多。因此项目侧打算建立专属的网联模块。车机几乎所有的网络功能，都通过这个模块封装的统一接口。项目侧初期进行了如下设计：  

	1.网联模块分两部分，model.aar，vm.aar给应用使用。
	2.各模块网络请求封装在aidl的servcie中，每个模块一个service。
	3.所有service打包在同一个app中，aar中通过aidl调用网络访问接口。
	4.所有service单独开一个进程，互不影响。
	5.有一个配置模块service，所有service的各项配置从通过aidl配置模块中读取。
	6.根据各自的配置使用后台不同的资源，例如通过配置可以自由切换使用A公司的音乐资源还是B公司的资源。
	
单独网联模块APP的原因：可能将功能对外提供，后期有BUG或功能修改，直接发布新网联APP即可，不需要各个应用升级。另外一点是项目侧的非技术原因。在开发过程中，设计在不断演化，也发现了一些弊端。

	弊端1.该网联APP有10几个模块，这将开启10+进程，（随着功能丰富，后续有可能有更多的模块加入）  
	直接导致了占用内存高达300M。这在我们正在做的低配项目上是消化不了的。
	因此该项目内网联APP取消了多进程，各模块运行在一个进程中。这种方式带来了另一个弊端，  
	各模块必须保证自己的稳定性，一旦某个模块挂掉，将直接影响其他模块。
	弊端2.aidl不允许使用方法重载，设定service异常重连等机制增加开发难度，重连期间接口调用无效。
	弊端3.客户端需要等待service连接成功后才能使用接口，而service启动后又需要先绑定另一个配置模块，
	获取到配置后才能正常工作。增加了开发和接口使用的复杂度。
	弊端4.aidl对单个进程传递数据有最大限制，从网络资料上看是单次最大数据1M。  
	经测试单次700k以上就很容易触发这个限制，所以个人人为这1M限制的不是单次而是带宽。  
	或者数据是700k，而同时为传递数据占用的其他内存超过了300k。没有深究，总之是有限制。
	演化1.项目增加了maven仓库，将各模块分离，引用的时候使用远程依赖即可。
	演化2.项目上增加了配置后台，可以将可变更配置项配置到后台，根据不同项目切换后台配置即可。
	无需更改车机侧。
	演化3.项目增加了中台，可以配合各模块增加原本资源不具备的功能。
我个人认为在增加了中台及后台配置情况下，单独的网联APP已经没有必要了，但项目侧有其他考虑，所以需要按照目前的方式进行。总结一下目前遇到的问题解决的方式  

	1.针对弊端2增加重连机制，设定重连上限100次（看心情设定的），
	如果重连了超过100次，我觉得也没有挽救的必要了。  
	增加servie重连接状态liveData，重连期间若有接口调用返回指定错误。
	2.为了解决弊端3，在客户端侧绑定模块service时，先返回一个binder，
	通过这个binder这个注册一个callback,当service侧获取到了配置，并准备好后，
	再将真正对应配置的接口实现binder返回给客户端。此时客户端才认为service连接成功。
	3.为了解决弊端4，增加分批传送机制。一旦需要传送的数据大于512K，
	则将数据分拆成四次传递，客户端再重新组装数据。
	4.客户端lib会对外提供，项目要求不能上传源码到maven仓库。  
	我发现项目提供的上传方式，远程依赖后，看不到接口的具体参数，也看不到doc注释。  
	这个问题只能自己解决了。解决的过程中发现上传的doc文档乱码，
	网络上没有解决办法，经过一番研究发现,不光要设置encoding参数，还要设置charSet参数。
	这样远程依赖就能直接查看到doc了
		
```
  	
	task androidJavadocs(type: Javadoc) {
    options.encoding = "UTF-8"
    // dogballs charSet也得设置
    options.charSet = "UTF-8"
    source = android.sourceSets.main.java.srcDirs
    // aidl需要引入
    source += 'build/generated/aidl_source_output_dir/release/compileReleaseAidl/out/com/autoai/weos/onlinemusic/'
    // 代码里用到了BuildConfig
    //    source += 'build/generated/source/buildConfig/debug/com/autoai/weos/onlinemusic/model/'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/R.java', '**/Constants.java', '**/*.aidl','**/BuildConfig.java'
    failOnError false
  	}

	task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
	}

	task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
	}

	artifacts {
	//    archives androidSourcesJar
    	//如果项目javadoc不全会报错，可以注释掉
    	archives androidJavadocsJar
	}
	/*在javadoc task执行之前先添加第三方的依赖进来，否则会找不到相关的jar包*/
	afterEvaluate {
    androidJavadocs.classpath += files(android.libraryVariants.collect { variant2 ->
        variant2.getJavaCompiler().classpath.files
    })
	}
```
		
		

	5.需要对外提供aar，但是我的模块打包出来时两个aar，需要合并为一个，
	使用com.kezong.fat-aar进行了aar合并。
	6.service端具体时间，由于中间后台版本升级，service为了兼容两版本接口，
    使用一个类同时实现了两个版本的接口，然后使用两个实现类，
	分别实现各自版本接口。这样就可以实现动态切换版本。
	7.登录信息保存在service端，使用拦截器增加共通参数和登录状态。
	这样，可以同步多客户端状态。
	8.客户端接口调用只要传递泛型，即可获取对应数据。若传递String则直接返回json。
	也可以传递自定义类型的bean，比较开放。  
	若构造callback时指定handler，则数据回调会在该handler线程中执行。
	9.手动实现了一版泛型的转换，但是后来发现gson中TypeToken有这个功能，后改为继承TypeToken实现。
	中间学会的问题,java中泛型会向上擦除，但如果时抽象类则不会擦除明白了TypeToken为什么抽象类。
	10.发现vm里业务逻辑比重较大，不通用，没有提供的必要，项目根据业务写vm即可。
	通用的可以保留。实际上没有提供vm.aar。

这个模块能想起来所做的事情大概就这些。今年就着这个模块还干了一个项目，中间还实现了一版APT插件，了解了glide自定义模块，可以使用glide加载自定义的类型，比如加载mp3文件专辑图，虽然没在项目中用到，不过也算是学到了。
另外，对媒体方面的业务代码更熟悉了些，比如使用动态代理对焦点的统一处理，媒体扫描库的实现，对播放列表的构建使用单独的播放列表类更合适，播放控制类使用播放item，列表泛型始得更通用等。  
后面的一个项目由于不是正式上线的项目，所以使用kotlin试水，kotlin是真的挺香的。
	
上面这些工作并没用多少时间，今年绝大部分时间是用在了一个项目上，这个项目硬件有些过时，加班不多，但是干的挺累，干的挺乱套的。还去上海出差了一周，第一次去一线城市啊，妈的天天加班啥都没看到就回来了。
	
差不多先这样吧，再想到什么以后再补充，准备上火车回家拉。